create database deli default charset utf8 collate utf8_unicode_ci;
http://www.voidcn.com/blog/xmdevops_1/article/p-6246451.html
https://github.com/rosarior/awesome-django
http://www.cnblogs.com/BeginMan/p/3860133.html
http://www.cnblogs.com/hhh5460/p/4564214.html
http://www.jb51.net/article/60889.htm
http://www.jb51.net/article/82233.htm
http://www.jb51.net/article/81524.htm
restful
https://my.oschina.net/u/2330859/blog/468829

http://blog.csdn.net/golearn/article/details/51497400

处理支付
http://www.jb51.net/article/63157.htm

http://www.jb51.net/article/60738.htm


http://www.codeweblog.com/stag/python-tornado-mongodb-redis-docker/
flask+redis

https://github.com/laiwei/thepast

http://www.jb51.net/article/86021.htm

mongo + flask
http://www.cocoachina.com/ios/20150519/11866.html

http://www.open-open.com/lib/view/open1450169297094.html



http://www.cocoachina.com/ios/20150504/11719.html


https://github.com/zangqilong198812/HotGirls




django全文检索功能
http://www.cnblogs.com/fuhuixiang/p/4488029.html
https://github.com/fxsjy/jieba/tree/master/jieba


人工智能深度学习Caffe框架介绍，优秀的深度学习架构

http://www.ciotimes.com/dfdt/122166.html



2016中国人工智能创业公司 



http://www.ciotimes.com/gjzc/122165.html
http://finance.21cn.com/newsdoc/zx/a/2016/1226/13/31810756.shtml


http://www.cnblogs.com/zdz8207/p/DeepLearning-Caffe.html

http://www.ciotimes.com/gjzc/122165.html

智能家居设备接入
目前BroadLink与国内外的品牌家、电工厂商基本都有对接，包括海尔、京东、飞利浦、方太、欧普、汇泰龙、鸿雁等超过150家知名企业产品，兼容10大云平台，实现了从单品到无限可扩展系统的架构。除了提供快速接入平台，BroadLink还为厂家提供超级APP服务、云服务与大数据服务、系统解决方案、人工智能服务等。通过BroadLink DNA计划实现的第三方互联互通平台为厂家、平台方、用户之间搭建了桥梁，也使得机器人、可穿戴设备、车联网与智能家居的结合可以标准化的迅速实现。


http://tv.ea3w.com/152/1523128.html



ajax json


在Django的模型中执行原始SQL查询的方法http://www.jb51.net/article/69774.htm
执行自定义sql:pymysql
c# wpf
http://blog.csdn.net/fighter_yy/article/details/41308277

https://github.com/mncu/django_projects
http://www.cnblogs.com/MnCu8261/tag/Django/


http://www.jb51.net/article/42653.htm

http://www.jb51.net/article/27504.htm

http://www.cnblogs.com/W-Kr/p/5456810.html


http://www.cnblogs.com/lijintian/p/6100097.html

http://blog.chinaunix.net/uid-25525723-id-341611.html

http://www.2cto.com/kf/201403/287200.html
http://blog.chinaunix.net/uid-25525723-id-342339.html
http://blog.csdn.net/clh604/article/details/19608869
http://blog.csdn.net/clh604/article/details/19822689

http://docs.30c.org/djangobook2/chapter07/
http://blog.csdn.net/dj1174232716/article/details/40863249
http://blog.csdn.net/xluren/article/details/17581497
https://github.com/ibuler/jumpserver#readme

http://blog.csdn.net/fanyunlei/article/details/21650483

http://blog.chinaunix.net/uid-26230811-id-3862857.html
http://blog.chinaunix.net/uid-25525723-id-342339.html
http://www.open-open.com/lib/query   flask
http://www.codesec.net/view/507700.html


deep caffe
http://suanfazu.com/t/caffe/281


webchat

http://www.cnblogs.com/zhming26/p/5920642.html

https://www.oschina.net/code/snippet_176897_5937
https://www.douban.com/group/topic/18012618/



http://www.jb51.net/article/69774.htm


http://blog.csdn.net/iloveyin/article/details/7545194
https://zhuanlan.zhihu.com/p/23178014?refer=zimei

http://www.linuxidc.com/Linux/2015-08/121380.htm
http://blog.csdn.net/iloveyin/article/details/49468645

http://www.cnblogs.com/tk091/p/4176103.html

http://www.voidcn.com/blog/xmdevops_1/article/p-6246451.html
https://github.com/rosarior/awesome-django
http://www.cnblogs.com/BeginMan/p/3860133.html
http://www.cnblogs.com/hhh5460/p/4564214.html
http://www.jb51.net/article/60889.htm
http://www.jb51.net/article/82233.htm
http://www.jb51.net/article/81524.htm
http://www.cnblogs.com/renjie0520/p/5242350.html
https://github.com/BeginMan/codetheme
http://www.cnblogs.com/jl-bai/p/5843322.html
http://www.cnblogs.com/caseast/p/6090759.html
http://www.cnblogs.com/ustbwuyi/archive/2007/02/08/645061.html#2215165
http://www.cnblogs.com/ustbwuyi/archive/2007/02/08/645061.html#2215165

http://www.cnblogs.com/holbrook/archive/2012/02/19/2358693.html

http://www.jb51.net/article/82233.htm

http://www.codesec.net/python.html

http://www.oschina.net/question/89964_65912

http://www.cnblogs.com/lhj588/archive/2012/02/20/2359172.html
http://blog.csdn.net/clh604/article/details/9716227

http://blog.csdn.net/clh604/article/category/1469421


http://www.cnblogs.com/lhj588/archive/2012/02/21/2361980.html

http://www.cnblogs.com/lhj588/p/4344366.html
http://www.cnblogs.com/lhj588/p/4344366.html

https://github.com/BeginMan/codetheme
http://www.cnblogs.com/jl-bai/p/5843322.html
二、银联支付
1. 银联支付（网关支付）与支付宝支付基本上遵循了同样的流程，但是在发起支付的请求报文和签名、验证签名等方面存在细微的差别，特别是在签名和验证签名时，支付宝是直接对报文内容进行了RSA加密，但是银联却是首先对签名内容取SHA1的摘要，继而对此摘要做RSA加密，这点在build_sign函数中就可以很明显地看出来。

2. 银联支付的证书文件申请流程比较繁琐，并且其格式也和支付宝使用的不同，我们申请到的私钥证书文件是以PKCS12的格式保存的，并且需要注意在从指定位置下载此证书后，导出证书时一定要将密码设置为6位的整数数字，之后，还需要将PKCS12格式的证书文件上传至指定位置并启用才可以正常使用此证书。

核心的签名和报文构建代码如下：
898440173720026

import time
import hashlib
import urllib, urllib2
import base64
import OpenSSL
from django.conf import settings

def build_sign(param_map, sign_type="RSA"):
    '''构建签名'''
    # 将筛选的参数按照第一个字符的键值ASCII码递增排序（字母升序排序），如果遇到相同字符则按照第二个字符的键值ASCII码递增排序，以此类推。
    sort_param = sorted([(key, unicode(value, settings.UNIONPAY_ENCODING).encode(settings.UNIONPAY_ENCODING)) for key, value in param_map.iteritems()], key=lambda x: x[0])
    content = '&'.join(['='.join(x) for x in sort_param])
    message = hashlib.sha1(content).hexdigest()
    return base64.b64encode(OpenSSL.crypto.sign(settings.UNIONPAY_PRIVATE_KEY_OBJ, message, 'sha1'))

def build_params(out_trade_no, total_amount):
    params = {}
    # 获取配置信息
    params['accType'] = settings.UNIONPAY_ACC_TYPE
    params['accessType'] = settings.UNIONPAY_ACCESS_TYPE
    params['backUrl'] = settings.UNIONPAY_BACK_URL
    params['frontUrl'] = settings.UNIONPAY_FRONT_URL
    params['bizType'] = settings.UNIONPAY_BIZ_TYPE
    params['certId'] = settings.UNIONPAY_CERT_ID
    params['channelType'] = settings.UNIONPAY_CHANNEL_TYPE
    params['currencyCode'] = settings.UNIONPAY_CURRENCY_CODE
    params['encoding'] = settings.UNIONPAY_ENCODING
    params['merId'] = settings.UNIONPAY_MER_ID
    params['signMethod'] = settings.UNIONPAY_SIGN_METHOD
    params['txnType'] = settings.UNIONPAY_TXN_TYPE
    params['txnSubType'] = settings.UNIONPAY_TXN_SUBTYPE
    params['version'] = settings.UNIONPAY_VERSION
    
    params['orderId'] = out_trade_no
    params['txnAmt'] = '%d' % int(total_amount) # 单位为分
    params['txnTime'] = time.strftime('%Y%m%d%H%M%S') # 
    
    params['signature'] = build_sign(params)
#     return params
    return urllib.urlencode(params)

def check_sign(message, sign):
    try:
        OpenSSL.crypto.verify(settings.UNIONPAY_PUBLIC_KEY_OBJ, sign, message, 'SHA1')
        return True
    except Exception as _:
        return False
        
        
        
商户私钥证书的载入方法（用户对发起支付的报文进行签名）：

# 商户私钥证书
UNIONPAY_APP_PRIVATE_KEY_CERT = os.path.join(UNIONPAY_CERTS_PATH, UNIONPAY_APP_PRIVATE_KEY_CERT_FILENAME) # PKCS12 format
UNIONPAY_PRIVATE_KEYSTORE = OpenSSL.crypto.load_pkcs12(open(UNIONPAY_APP_PRIVATE_KEY_CERT).read(), UNIONPAY_APP_PRIVATE_KEY_CERT_PASSWORD)
UNIONPAY_PRIVATE_KEY_OBJ = UNIONPAY_PRIVATE_KEYSTORE.get_privatekey()


银联公钥证书的载入方法（用于验证银联回调的合法性）：


# 银联公钥证书
UNIONPAY_PUBLIC_KEY_CERT = os.path.join(UNIONPAY_CERTS_PATH, UNIONPAY_PUBLIC_KEY_CERT_FILENAME)
UNIONPAY_PUBLIC_KEY_OBJ = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, open(UNIONPAY_PUBLIC_KEY_CERT).read())




后记：银联支付接入过程中，参考过其官方提供的一个Python实现的接口，里面同时使用了python的rsa模块和OpenSSL模块，并且对证书的格式做了各种处理，但是这些似乎是没有什么必要，只使用OpenSSL模块就完全可以完成相关的工作。



在很多语音视频软件系统中，经常有将实时的音频或视频录制为文件保存到磁盘的需求，比如，视频监控系统中录制监控到的视频、视频会议系统中录制整个会议的过程、语音通话系统中录制完整的对话内容、等等。　

一.缘起
      最近正在做的一个网络招聘平台的项目，其中有一个模块是这样的，应聘者可以通过该系统的客户端录制自己的视频（自我介绍）上传到服务器，而后，招聘者会在合适的时候浏览这些应聘者的视频。该模块涉及到的主要技术就是语音视频录制技术，它需要把从麦克风采集到的语音数据和从摄像头采集到的视频数据编码并写到.mp4文件中。要完成这些功能，具体来说，需要解决如下几个技术问题：

（1）麦克风数据采集

（2）摄像头数据采集

（3）音频数据编码

（4）视频数据编码

（5）将编码后的数据按.mp4文件格式写入到文件容器中。

（6）保证音频视频播放的同步。

二.Demo实现
      如果要从头开始一步步解决这些问题，将是非常艰难的挑战。幸运的是，我们可以通过已有组件的组合来实现这些功能，语音视频数据的采集我们可以借助OMCS框架完成，后续的语音视频编码并生成mp4文件，我们可以借助MFile组件完成。为了更方便地讲解，这里我们将给出一个具体的demo，它可以录制从本地摄像头和本地麦克风采集的数据并生成mp4文件。demo运行的截图如下所示：















